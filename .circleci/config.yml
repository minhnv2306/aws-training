version: 2.1
jobs:
  build_and_test:
    docker:
      # Specify the version you desire here
      - image: php:7.4.16-cli-alpine

    steps:
      - checkout

      - run:
          name: "Prepare Environment"
          command: |
            # sudo apt-get update
            curl -sS https://getcomposer.org/installer -o composer-setup.php
            php composer-setup.php --install-dir=/usr/local/bin --filename=composer
            # sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # Run tests with phpunit
      - run:
          name: "Run PHPUnit Tests"
          command: ./vendor/bin/phpunit

      # Run phpcs tests!
      - run:
          name: "Run PHPCS Tests"
          command: ./vendor/bin/phpcs -np

  deployment:
    docker:
      - image: php:7.3-cli-buster
    steps:
      - add_ssh_keys:
          fingerprints:
            - "$PRIVATE_KEY_FINGERPRINTS"
      - checkout
      - run:
          name: "Prepare Environment"
          command: |
            # We can move it in custom image
            apt-get update
            apt-get install openssh-client -y
      - run:
          name: Install Deployer
          command: |
            curl -LO https://deployer.org/deployer.phar
            mv deployer.phar /usr/local/bin/dep
            chmod +x /usr/local/bin/dep
      - run:
          name: Deploy
          command: |
            if [ -z `ssh-keygen -F $HOST` ]; then
              ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
            fi

            dep deploy
      # Sending Chatwork successful notification
      - run:
          name: "Sending Chatwork successful notification"
          when: on_success
          command: |
            curl -X POST -H "X-ChatWorkToken: $CHATWORK_TOKEN" -d \
              "body=$LIST_TO_CHATWORK [info][title]Circle CI Build Result $CIRCLE_BUILD_NUM - SUCCESS[/title]Repo: $CIRCLE_PROJECT_REPONAME
            Author: $CIRCLE_USERNAME
            Branch: $CIRCLE_BRANCH
            Build link: https://app.circleci.com/pipelines/github/minhnv2306/aws-training/$CIRCLE_BUILD_NUM [/info]" \
            "https://api.chatwork.com/v2/rooms/$CHATWORK_ROOM_ID/messages"
      # Sending Chatwork failed notification
      - run:
          name: "Sending Chatwork failed notification"
          when: on_fail
          command: |
            curl -X POST -H "X-ChatWorkToken: $CHATWORK_TOKEN" -d \
              "body=$LIST_TO_CHATWORK [info][title]Circle CI Build Result $CIRCLE_BUILD_NUM - FAIL[/title]Repo: $CIRCLE_PROJECT_REPONAME
            Author: $CIRCLE_USERNAME
            Branch: $CIRCLE_BRANCH
            Build link: https://app.circleci.com/pipelines/github/minhnv2306/aws-training/$CIRCLE_BUILD_NUM [/info]" \
            "https://api.chatwork.com/v2/rooms/$CHATWORK_ROOM_ID/messages"
  # deployment:
  #   docker:
  #     - image: circleci/php:7.2-browsers
  #   steps:
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "$PRIVATE_KEY_FINGERPRINTS"
  #     - checkout
  #     - run:
  #         name: Install Rocketeer
  #         command: |
  #           wget http://rocketeer.autopergamene.eu/versions/rocketeer.phar
  #           sudo chmod +x rocketeer.phar
  #           sudo mv rocketeer.phar /usr/local/bin/rocketeer
  #     - run:
  #         name: Deploy
  #         command: |
  #           if [ -z `ssh-keygen -F '3.142.12.48'` ]; then
  #             ssh-keyscan -H '3.142.12.48' >> ~/.ssh/known_hosts
  #           fi

  #           rocketeer deploy --on=staging --no-interaction
  docker-deployment:
    docker:
      - image: circleci/php:7.3.25-cli
    steps:
      - checkout
      # Docker build and push
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup VirtualEnv
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NGINX_NAME=m_nginx' >> $BASH_ENV
            echo 'export IMAGE_PHP_NAME=m_php_fpm' >> $BASH_ENV
      - run:
          name: Build and push Docker image
          command: |
            docker build -t minhnv2306/$IMAGE_NGINX_NAME:$TAG ./docker-compose/nginx
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push minhnv2306/$IMAGE_NGINX_NAME:$TAG

            docker build -t minhnv2306/$IMAGE_PHP_NAME:$TAG ./docker-compose/php-fpm
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push minhnv2306/$IMAGE_PHP_NAME:$TAG
      - add_ssh_keys:
          fingerprints:
            - "$PRIVATE_KEY_FINGERPRINTS"
      - run:
          name: Deploy app to My Project Server via Docker
          command: |
            ssh -o StrictHostKeyChecking=no $USER_HOST@$HOST "cd /var/www/html/docker-deploy && git pull origin master && /bin/bash ./docker-compose/deploy-app.sh ${TAG}"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_and_test
      - deployment:
          requires:
            - build_and_test
      #     filters:
      #       branches:
      #         only: master
      # - docker-deployment:
      #     requires:
      #       - deployment
      #     filters:
      #       branches:
      #         only: master
